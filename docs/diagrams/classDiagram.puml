@startuml Class Diagram

package "models" #DDDDDD {
  User <|-- Administrator
  User <|-- Instructor
  User <|-- Student

  Model <|-- Enrolment
  Model <|-- Exam
  Model <|-- Subject
  Model <|-- InstructorSubject
  Model <|-- Question
  Model <|-- QuestionSubmission
  Model <|-- ExamSubmission
  Model <|-- Option

  proxies.ProxyList o-- Model : - models

  shared.UnitOfWork o-- Model : - newObjects
  shared.UnitOfWork o-- Model : - dirtyObjects
  shared.UnitOfWork o-- Model : - deletedObjects

  Question <|-- ShortAnswerQuestion
  Question <|-- MultipleChoiceQuestion

  abstract class User {
    - String email
    - String name
    - String passwordHash
    - String type
    + User(String email,String name,String passwordHash,String type)
    + User(UUID id,String email,String name,String passwordHash,String type)
    + String getEmail()
    + String getName()
    + String getPasswordHash()
    + String getType()
    + void setEmail(String email)
    + void setName(String name)
    + void setPasswordHash(String passwordHash)
  }

  class Administrator {
    + {static} String TYPE
    + Administrator(UUID id,String email,String name,String passwordHash)
    + Administrator(String email,String name,String passwordHash)
  }

  Instructor o-- proxies.ProxyList : - subjects

  class Instructor {
    + {static} String TYPE
    - ProxyList<Subject> subjects
    + Instructor(UUID id, String email, String name, String passwordHash)
    + Instructor(String email, String name, String passwordHash)
    + ProxyList<Subject> getSubjects()
  }

  Student o-- proxies.ProxyList : - subjects
  Student o-- proxies.ProxyList : - examSubmissions

  class Student #white {
    + {static} String TYPE
    + Student(UUID id, String email, String name, String passwordHash)
    + Student(String email, String name, String passwordHash)
    + ProxyList<Subject> getSubjects()
    + ProxyList<ExamSubmission> getExamSubmissions()
  }

  class DateRange {
    - Date fromDate
    - Date toDate
    + DateRange(Date fromDate, Date toDate)
    + Date getFromDate()
    + Date getToDate()
    + void setFromDate(Date fromDate)
    + void setToDate(Date toDate)
  }

  abstract class Model #white {
    - UUID id
    + Model()
    + Model(UUID id)
    + UUID getId()
    + Meta getMeta()
  }

  Enrolment o-- Student : - student
  Enrolment o-- Subject : - subject

  class Enrolment {
    - UUID studentId
    - UUID subjectId
    + Enrolment(UUID id, UUID studentId, UUID subjectId)
    + Enrolment(UUID studentId, UUID subjectId)
    + UUID getStudentId()
    + UUID getSubjectId()
    + Student getStudent()
    + Subject getSubject()
    + void setStudentId(UUID studentId)
    + void setSubjectId(UUID subjectId)
    + void setStudent(Student student)
    + void setSubject(Subject subject)
  }

  Exam o-- proxies.ProxyList : - questions
  Exam o-- proxies.ProxyList : - examSubmissions
  Exam o-- DateRange : - dateRange
  Exam o-- Subject : - subject

  class Exam {
    - String name
    - String description
    - String slug
    - UUID subjectId
    + Exam(UUID id,String name,String description,DateRange dateRange,UUID subjectId,String slug)
    + Exam(String name,String description,DateRange dateRange,UUID subjectId)
    + String getName()
    + String getDescription()
    + String getSlug()
    + Date getStartTime()
    + Date getFinishTime()
    + ProxyList<Question> getQuestions()
    + ProxyList<ExamSubmission> getExamSubmissions()
    + void setName(String name)
    + void setDescription(String description)
    + void setStartTime(Date startTime)
    + void setFinishTime(Date finishTime)
    + UUID getSubjectId()
    + Subject getSubject()
    + void setSubjectId(UUID subjectId)
    + void setSubject(Subject subject)
  }

  Subject o-- proxies.ProxyList : - instructors
  Subject o-- proxies.ProxyList : - students
  Subject o-- proxies.ProxyList : - exams

  class Subject {
    - String name
    - String description
    - String slug
    + Subject(UUID id, String name, String description, String slug)
    + Subject(String name, String description)
    + String getName()
    + String getSlug()
    + String getDescription()
    + ProxyList<Instructor> getInstructors()
    + ProxyList<Student> getStudents()
    + ProxyList<Exam> getExams()
    + void setName(String name)
    + void setDescription(String description)
  }

  InstructorSubject o-- Instructor : - instructor
  InstructorSubject o-- Subject : - subject

  class InstructorSubject {
    - UUID instructorId
    - UUID subjectId
    + InstructorSubject(UUID id, UUID instructorId, UUID subjectId)
    + InstructorSubject(UUID instructorId, UUID subjectId)
    + UUID getInstructorId()
    + UUID getSubjectId()
    + Instructor getInstructor()
    + Subject getSubject()
    + void setInstructorId(UUID instructorId)
    + void setSubjectId(UUID subjectId)
    + void setInstructor(Instructor instructor)
    + void setSubject(Subject subject)
  }

  Question o-- proxies.ProxyList : - questionSubmissions
  Question o-- Exam : - exam

  abstract class Question {
    - String question
    - int marks
    - UUID examId
    - String type
    + Question(UUID id,String question,int marks,UUID examId,String type)
    + Question(String question, int marks, UUID examId, String type)
    + String getQuestion()
    + int getMarks()
    + String getType()
    + ProxyList<QuestionSubmission> getQuestionSubmissions()
    + void setQuestion(String question)
    + void setMarks(int marks)
    + UUID getExamId()
    + Exam getExam()
    + void setExamId(UUID examId)
    + void setExam(Exam exam)
  }

  class ShortAnswerQuestion {
    + {static} String TYPE
    + ShortAnswerQuestion(UUID id,String question,int marks,UUID examId)
    + ShortAnswerQuestion(String question, int marks, UUID examId)
  }

  MultipleChoiceQuestion o-- proxies.ProxyList : - options

  class MultipleChoiceQuestion {
    + {static} String TYPE
    + MultipleChoiceQuestion(UUID id,String question,int marks,UUID examId)
    + MultipleChoiceQuestion(String question, int marks, UUID examId)
    + ProxyList<Option> getOptions()
  }

  Option o-- Question : - question

  class Option {
    - String answer
    - boolean correct
    - UUID questionId
    + Option(UUID id, String answer, boolean correct, UUID questionId)
    + Option(String answer, boolean correct, UUID questionId)
    + String getAnswer()
    + boolean isCorrect()
    + void setAnswer(String answer)
    + void setCorrect(boolean correct)
    + Question getQuestion()
    + UUID getQuestionId()
    + void setQuestion(Question question)
    + void setQuestionId(UUID questionId)
  }

  QuestionSubmission o-- Question : - question
  QuestionSubmission o-- ExamSubmission : - examSubmission

  class QuestionSubmission #white {
    + String answer
    + UUID questionId
    + UUID examSubmissionId
    - Integer marks
    + QuestionSubmission(UUID id, String answer, UUID questionId, UUID examSubmissionId, Integer marks)
    + QuestionSubmission(String answer, UUID questionId, UUID examSubmissionId, Integer marks)
    + String getAnswer()
    + Integer getMarks()
    + void setMarks(Integer marks)
    + void setAnswer(String answer)
    + UUID getQuestionId()
    + UUID getExamSubmissionId()
    + Question getQuestion()
    + ExamSubmission getExamSubmission()
    + void setQuestionId(UUID questionId)
    + void setExamSubmissionId(UUID examSubmissionId)
    + void setQuestion(Question question)
    + void setExamSubmission(ExamSubmission examSubmission)
  }

  ExamSubmission o-- proxies.ProxyList : - questionSubmissions
  ExamSubmission o-- Student : - student
  ExamSubmission o-- Exam : - exam

  class ExamSubmission #white {
    - Integer marks
    - UUID studentId
    - UUID examId
    + ExamSubmission(UUID id, Integer marks, UUID studentId, UUID examId)
    + ExamSubmission(Integer marks, UUID studentId, UUID examId)
    + Integer getMarks()
    + ProxyList<QuestionSubmission> getQuestionSubmissions()
    - List<QuestionSubmission> getRawQuestionSubmissions()
    + void setMarks(Integer marks)
    + UUID getStudentId()
    + UUID getExamId()
    + Student getStudent()
    + Exam getExam()
    + void setStudentId(UUID studentId)
    + void setExamId(UUID examId)
    + void setStudent(Student student)
    + void setExam(Exam exam)
  }

  class meta #white {
    + String eTag
    + Meta(String eTag)
  }
}

package "proxies" #DDDDDD {
  ProxyList <|-- ExamProxyList
  ProxyList <|-- ExamSubmissionExamProxyList
  ProxyList <|-- ExamSubmissionStudentProxyList
  ProxyList <|-- SubjectStudentProxyList
  ProxyList <|-- SubjectInstructorProxyList
  ProxyList <|-- StudentProxyList
  ProxyList <|-- QuestionSubmissionQuestionProxyList
  ProxyList <|-- QuestionSubmissionExamSubmissionProxyList
  ProxyList <|-- QuestionProxyList
  ProxyList <|-- InstructorProxyList
  ProxyList <|-- OptionProxyList

  abstract class ProxyList #white {
    # UUID id
    + ProxyList(UUID id)
    + void add(T obj)
    + boolean contains(T obj)
    + T get(int index)
    + int size()
    + remove(T obj)
    + List<T> getRawList()
    # {abstract} void init() 
  }

  class ExamProxyList {
    + ExamProxyList(UUID subjectId)
    # void init()
  }

  class ExamSubmissionExamProxyList{
    + ExamSubmissionExamProxyList(UUID examId)
    # void init()
  }

  class ExamSubmissionStudentProxyList {
    + ExamSubmissionStudentProxyList(UUID studentId)
    # void init()
  }

  class InstructorProxyList {
    + InstructorProxyList(UUID subjectId)
    # void init()
    + void remove(Instructor instructor)
  }

  class OptionProxyList {
    + OptionProxyList(UUID questionId)
    # void init()
  }

  class QuestionProxyList {
    + QuestionProxyList(UUID examId)
    # void init()
  }

  class QuestionSubmissionExamSubmissionProxyList {
    + QuestionSubmissionExamSubmissionProxyList(UUID examSubmissionId)
    # void init()
  }

  class QuestionSubmissionQuestionProxyList {
    + QuestionSubmissionQuestionProxyList(UUID questionId)
    # void init()
  }

  class StudentProxyList {
    + StudentProxyList(UUID subjectId)
    # void init()
    + void remove(Student student)
  }

  class SubjectInstructorProxyList {
    + SubjectInstructorProxyList(UUID instructorId)
    # void init()
    + void remove(Subject subject)
  }

  class SubjectStudentProxyList {
    + SubjectStudentProxyList(UUID studentId)
    # void init()
    + void remove(Subject subject)
  }
}

package "controllers" #DDDDDD {
  UserController o-- services.UserService : - userService
  class UserController {
    + List<User> getUsers()
    + Response createUser(CreateUserDTO dto)
  }

  SubjectController o-- services.SubjectService : - subjectService
  SubjectController o-- services.ExamService : - examService
  SubjectController o-- services.UserService : - userService

  class SubjectController #white {
    + List<Subject> getSubjects(SecurityContext securityContext)
    + Subject getSubject(String slug)
    + Subject createSubject(CreateSubjectDTO dto)
    + List<Exam> getExamsForSubject(SecurityContext securityContext)
    + Exam createExam(String subjectId, CreateExamDTO dto)
    + Subject updateSubject(String subjectId, HttpHeaders headers, CreateSubjectDTO dto)
    + List<Instructor> getInstructors(String subjectId)
    + Response addInstructorToSubject(String subjectId, String instructorId)
    + Response addStudentToSubject(String subjectId, String studentId)
    + Response deleteInstructorFromSubject(String subjectId, String instructorId)
    + List<Student> getStudents(String subjectId)
    + Response deleteStudentFromSubject(String subjectId, String studentId)
  }

  AuthController o-- services.AuthService : - authService

  class AuthController {
    - Key key
    + Response signIn(SignInUserDTO dto)
    + Response signOut()
  }

  ExamController o-- services.ExamService : - examService
  ExamController o-- services.QuestionService : - questionService

  class ExamController #white {
    + Exam getExam(String slug)
    + Exam updateExam(String examId, HttpHeaders headers, CreateExamDTO dto)
    + Response deletExam(String examId)
    + Question createQuestion(String examId, CreateQuestionDTO dto)
    + List<Question> getQuestions(String examId)
    + ExamSubmission createSubmission(String examId, String studentId, SecurityContext securityContext, CreateExamSubmissionDTO dto)
    + ExamSubmission updateSubmission(String examId, String studentId, SecurityContext securityContext, HttpHeaders headers, UpdateExamSubmissionDTO dto)
    + List<ExamSubmission> getSubmissions(String examId, SecurityContext securityContext)
  }

  OptionController o-- services.OptionService : - optionService

  class OptionController #white {
    + Option updateOption(String optionId, HttpHeaders headers, CreateOptionDTO dto)
    + Response deleteOption(String optionId)
  }

  QuestionController o-- services.QuestionService : - questionService
  QuestionController o-- services.OptionService : - optionService

  class QuestionController #white {
    + Question updateQuestion(String questionId, HttpHeaders headers, CreateQuestionDTO dto)
    + Response deleteExam(String questionId)
    + List<Option> getOptions(String questionId)
    + Option createOption(String questionId, CreateOptionDTO dto)
    + QuestionSubmission createSubmission(
        String questionId,
        String examSubmissionId,
        CreateQuestionSubmissionDTO dto)
    + QuestionSubmission updateSubmission(
        String questionId,
        String examSubmissionId,
        HttpHeaders headers,
        UpdateQuestionSubmissionDTO dto)
  }
}

package "dtos" #DDDDDD {
  class CreateExamDTO {
    + String name
    + String description
    + Date startTime
    + Date finishTime
  }

  class CreateExamSubmissionDTO {
    + Integer marks
  }

  CreateExamSubmissionDTO o-- CreateQuestionSubmissionDTO : + answers

  class CreateOptionDTO {
    + String answer
    + boolean correct
  }

  class CreateQuestionDTO #white {
    + String question
    + String type
    + int marks
  }

  CreateQuestionDTO o-- CreateOptionDTO : + options

  class CreateQuestionSubmissionDTO {
    + String questionId
    + String answer
    + Integer marks
  }

  class CreateSubjectDTO {
    + String name
    + String description
    + UUID[] instructors
    + UUID[] students
  }

  class CreateUserDTO {
    + String name
    + String email
    + String password
    + String type
  }

  class SignInUserDTO {
    + String email
    + String password
  }
  
  class UpdateExamSubmissionDTO #white {
    + Integer marks
  }

  class UpdateQuestionSubmissionDTO #white {
    + String questionId
    + Integer marks
  }
}

package "filters" #DDDDDD {
  class AuthFilter {
    - Key key
    + void filter(ContainerRequestContext requestContext)
  }

  interface Protected
}

package "services" #DDDDDD {
  AuthService o-- mappers.UserMapper : - userMapper

  class AuthService {
    + User authenticateUser(String email, String password)
  }

  UserService o-- mappers.UserMapper : - userMapper
  UserService o-- mappers.InstructorMapper : - instructorMapper
  UserService o-- mappers.StudentMapper : - studentMapper

  class UserService #white {
    + List<User> getUsers() 
    + User registerUser(String name,
        String email,
        String password,
        String type)
    + List<Instructor> getInstructorsForSubject(UUID subjectId)
    + List<Student> getStudentsForSubject(UUID subjectId)
  }

  ExamService o-- mappers.ExamMapper : - examMapper
  ExamService o-- mappers.ExamSubmissionMapper : - examSubmissionMapper

  class ExamService #white {
    + Exam getExam(String slug)
    + List<Exam> getExamsForSubject(UUID subjectId)
    + List<Exam> getPublishedExamsForSubject(UUID subjectId)
    + Exam createExam(String name,
        String description,
        Date startTime,
        Date finishTime,
        UUID subjectId)
    + Exam updateExam(String name,
        String description,
        Date startTime,
        Date finishTime,
        UUID examId,
        String eTag)
    + void deleteExam(UUID examId)
    + ExamSubmission createSubmission(UUID examId,
        UUID studentId,
        Integer marks,
        List<CreateQuestionSubmissionDTO> answers)
    + List<ExamSubmission> getSubmissions(UUID examId)
    + ExamSubmission getSubmissionForUser(UUID examId, UUID userId)
    + ExamSubmission updateSubmission(
        UUID examId,
        UUID studentId,
        Integer marks,
        String eTag)
  }

  QuestionService o-- mappers.QuestionMapper : - questionMapper

  class QuestionService #white {
    + Question createQuestion(UUID examId,
        String question,
        int marks,
        String type,
        List<CreateOptionDTO> options)
    + Question updateQuestion(String question,
        int marks,
        UUID questionId,
        String eTag)
    + void deleteQuestion(UUID questionId)
    + List<Question> getQuestionsForExam(UUID examId)
    + QuestionSubmission createSubmission(
        UUID questionId,
        UUID examSubmissionId,
        String answer,
        Integer marks)
    + QuestionSubmission updateSubmission(
        UUID questionId,
        UUID examSubmissionId,
        Integer marks,
        String eTag)
  }

  SubjectService o-- mappers.SubjectMapper : - subjectMapper
  SubjectService o-- mappers.EnrolmentMapper : - enrolmentMapper
  SubjectService o-- mappers.InstructorSubjectMapper : - instructorSubjectMapper

  class SubjectService #white {
    + List<Subject> getSubjects()
    + Subject getSubject(String slug)
    + List<Subject> getSubjectsForInstructor(UUID id)
    + List<Subject> getSubjectsForStudent(UUID id)
    + void addInstructorToSubject(UUID subjectId, UUID instructorId)
    + void addStudentToSubject(UUID subjectId, UUID studentId)
    + void deleteInstructorFromSubject(UUID subjectId,
        UUID instructorId)
    + void deleteStudentFromSubject(UUID subjectId,
        UUID studentId)
    + Subject createSubject(String name,
        String description,
        UUID[] instructors,
        UUID[] students)
    + Subject updateSubject(String name,
        String description,
        UUID subjectId,
        String eTag)
  }

  OptionService o-- mappers.OptionMapper : - optionMapper

  class OptionService #white {
    + Option createOption(String answer,
        boolean correct,
        UUID questionId)
    + Option updateOption(UUID optionId,
        String answer,
        boolean correct,
        String eTag)
    + void deleteOption(UUID optionId)
    + List<Option> getOptionsForQuestion(UUID questionId)
  }
}

package "mappers" #DDDDDD {
  Mapper <|-- AbstractUserMapper
  Mapper <|-- SubjectMapper
  Mapper <|-- InstructorSubjectMapper
  Mapper <|-- EnrolmentMapper
  Mapper <|-- AbstractQuestionMapper
  Mapper <|-- OptionMapper
  Mapper <|-- QuestionSubmissionMapper
  Mapper <|-- ExamSubmissionMapper
  Mapper <|-- ExamMapper

  AbstractUserMapper <|-- UserMapper
  AbstractUserMapper <|-- InstructorMapper
  AbstractUserMapper <|-- StudentMapper
  AbstractUserMapper <|-- AdministratorMapper

  AbstractQuestionMapper <|-- QuestionMapper
  AbstractQuestionMapper <|-- ShortAnswerQuestionMapper
  AbstractQuestionMapper <|-- MultipleChoiceQuestionMapper

  abstract class Mapper {
    + {static} <T extends Model> Mapper<T> getMapper(Class<?> klass)
    + T findById(UUID id, boolean forUpdate)
    + T findById(UUID id)
    # T findByProp(String prop, Object value, boolean forUpdate)
    + List<T> findAll(boolean forUpdate)
    + List<T> findAll()
    + {abstract} void insert(T obj)
    + {abstract} void update(T obj)
    + void delete(T obj)
    + void deleteById(UUID id)
    # {abstract} T load(ResultSet rs)
    # {abstract} String getTableName()
  }

  abstract class AbstractUserMapper #white {
    - {static} String tableName
    + User findByEmail(String email, boolean forUpdate)
    # String getTableName()
    # {abstract} String getType()
  }

  class UserMapper {
    # String getType()
  }

  class AdministratorMapper {
  }

  class StudentMapper #white {
    + List<Student> findAllForSubject(UUID id, boolean forUpdate)
    + List<Student> findAllForSubject(UUID id)
  }

  class InstructorMapper #white {
    + List<Instructor> findAllForSubject(UUID id, boolean forUpdate)
    + List<Instructor> findAllForSubject(UUID id)
  }

  class EnrolmentMapper #white {
    - {static} String tableName
    + Enrolment findByRelationIds(UUID studentId,UUID subjectId, boolean forUpdate)
    + Enrolment findByRelationIds(UUID studentId,UUID subjectId)
    + void deleteByRelationIds(UUID studentId,UUID subjectId)
  }

  class SubjectMapper #white {
    - {static} String tableName
    + Subject findBySlug(String slug, boolean forUpdate)
    + Subject findBySlug(String slug)
    + List<Subject> findAllForStudent(UUID id, boolean forUpdate)
    + List<Subject> findAllForStudent(UUID id)
    + List<Subject> findAllForInstructor(UUID id, boolean forUpdate)
    + List<Subject> findAllForInstructor(UUID id)
  }

  class InstructorSubjectMapper #white {
    - {static} String tableName
    + InstructorSubject findByRelationIds(UUID instructorId, UUID subjectId, boolean forUpdate)
    + InstructorSubject findByRelationIds(UUID instructorId, UUID subjectId)
    + void deleteByRelationIds(UUID instructorId, UUID subjectId)
  }

  abstract class AbstractQuestionMapper {
    - {static} String tableName
    # {abstract} String getType()
  }

  class OptionMapper #white {
    - {static} String tableName
    + List<Option> findAllForQuestion(UUID id, boolean forUpdate)
    + List<Option> findAllForQuestion(UUID id)
  }

  class QuestionMapper #white {
    + List<Question> findAllForExam(UUID id, boolean forUpdate)
    + List<Question> findAllForExam(UUID id)
  }

  class ShortAnswerQuestionMapper {
  }

  class MultipleChoiceQuestionMapper {
  }

  class QuestionSubmissionMapper #white {
    - {static} String tableName
    + QuestionSubmission findByRelationIds(UUID questionId, UUID examSubmissionId, boolean forUpdate)
    + QuestionSubmission findByRelationIds(UUID questionId, UUID examSubmissionId)
    + List<QuestionSubmission> findAllForExamSubmission(UUID id, boolean forUpdate)
    + List<QuestionSubmission> findAllForExamSubmission(UUID id)
    + List<QuestionSubmission> findAllForQuestion(UUID id, boolean forUpdate)
    + List<QuestionSubmission> findAllForQuestion(UUID id)
  }

  class ExamSubmissionMapper #white {
    - {static} String tableName
    + ExamSubmission findByRelationIds(UUID studentId, UUID examId, boolean forUpdate)
    + ExamSubmission findByRelationIds(UUID studentId, UUID examId)
    + List<ExamSubmission> findAllForExam(UUID id, boolean forUpdate)
    + List<ExamSubmission> findAllForExam(UUID id)
    + List<ExamSubmission> findAllForStudent(UUID id, boolean forUpdate)
    + List<ExamSubmission> findAllForStudent(UUID id)
  }

  class ExamMapper #white {
    - {static} String tableName
    + Exam findBySlug(String slug, boolean forUpdate)
    + Exam findBySlug(String slug)
    + List<Exam> findAllForSubject(UUID id, boolean forUpdate)
    + List<Exam> findAllForSubject(UUID id)
    + List<Exam> findAllPublishedExams(UUID id, boolean forUpdate)
    + List<Exam> findAllPublishedExams(UUID id)
  }
}

package "shared" #DDDDDD {
  class DBConnection #white {
    - {static} ThreadLocal<DBConnection> dbConnection
    - Connection connection
    - {static} String connectionUrl
    - DBConnection()
    + {static} DBConnection getCurrent()
    + Connection getConnection()
    + void close()
  }

  class IdentityMap #white {
    - {static} IdentityMap identityMap
    - Map<UUID, Model> map
    - IdentityMap()
    + static void newCurrent()
    + {static} IdentityMap getCurrent()
    + Model get(UUID id)
    + void put(UUID id, Model obj)
    + void remove(UUID id)
    + static void reset()
  }

  class Seeds {
    - {static} UserService userService
    - {static} SubjectService subjectService
    - {static} ExamService examService
    - {static} String connectionUrl
    - {static} String ddl
    + {static} void main(String[] args)
  }

  class UnitOfWork #white {
    - {static} ThreadLocal<UnitOfWork> current
    - List<Model> newObjects
    - List<Model> dirtyObjects
    - List<Model> deletedObjects
    + {static} void newCurrent()
    + {static} UnitOfWork getCurrent()
    - boolean objectInAnyList(Model obj)
    + void registerNew(Model obj)
    + void registerDirty(Model obj)
    + void registerDeleted(Model obj)
    + void rollback() 
    + void commit()
    + {static} void reset()
  }
}

package "exceptions" #DDDDDD {
  RuntimeException <|-- ConflictException
  RuntimeException <|-- PreconditionFailedException

  class ConflictException #white {
  }

  class PreconditionFailedException #white {
  }    

  package "exceptionMappers" #DDDDDD {
    class ConflictExceptionMapper #white {
    }

    class PreconditionFailedExceptionMapper #white {
    }
  }
}

class Application #white {
  + Application()
}

@enduml
